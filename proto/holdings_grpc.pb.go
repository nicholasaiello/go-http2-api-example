// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: proto/holdings.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AccountHoldingsClient is the client API for AccountHoldings service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountHoldingsClient interface {
	// Return a portfolio (holdings)
	GetHoldings(ctx context.Context, in *Account, opts ...grpc.CallOption) (*Holdings, error)
	// Return a holding/position
	GetHolding(ctx context.Context, in *Holding, opts ...grpc.CallOption) (*Holding, error)
	// Return positions within a portfolio (holdings)
	ListHoldings(ctx context.Context, in *Account, opts ...grpc.CallOption) (AccountHoldings_ListHoldingsClient, error)
}

type accountHoldingsClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountHoldingsClient(cc grpc.ClientConnInterface) AccountHoldingsClient {
	return &accountHoldingsClient{cc}
}

func (c *accountHoldingsClient) GetHoldings(ctx context.Context, in *Account, opts ...grpc.CallOption) (*Holdings, error) {
	out := new(Holdings)
	err := c.cc.Invoke(ctx, "/proto.AccountHoldings/GetHoldings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountHoldingsClient) GetHolding(ctx context.Context, in *Holding, opts ...grpc.CallOption) (*Holding, error) {
	out := new(Holding)
	err := c.cc.Invoke(ctx, "/proto.AccountHoldings/GetHolding", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountHoldingsClient) ListHoldings(ctx context.Context, in *Account, opts ...grpc.CallOption) (AccountHoldings_ListHoldingsClient, error) {
	stream, err := c.cc.NewStream(ctx, &AccountHoldings_ServiceDesc.Streams[0], "/proto.AccountHoldings/ListHoldings", opts...)
	if err != nil {
		return nil, err
	}
	x := &accountHoldingsListHoldingsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AccountHoldings_ListHoldingsClient interface {
	Recv() (*Holding, error)
	grpc.ClientStream
}

type accountHoldingsListHoldingsClient struct {
	grpc.ClientStream
}

func (x *accountHoldingsListHoldingsClient) Recv() (*Holding, error) {
	m := new(Holding)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AccountHoldingsServer is the server API for AccountHoldings service.
// All implementations must embed UnimplementedAccountHoldingsServer
// for forward compatibility
type AccountHoldingsServer interface {
	// Return a portfolio (holdings)
	GetHoldings(context.Context, *Account) (*Holdings, error)
	// Return a holding/position
	GetHolding(context.Context, *Holding) (*Holding, error)
	// Return positions within a portfolio (holdings)
	ListHoldings(*Account, AccountHoldings_ListHoldingsServer) error
	mustEmbedUnimplementedAccountHoldingsServer()
}

// UnimplementedAccountHoldingsServer must be embedded to have forward compatible implementations.
type UnimplementedAccountHoldingsServer struct {
}

func (UnimplementedAccountHoldingsServer) GetHoldings(context.Context, *Account) (*Holdings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHoldings not implemented")
}
func (UnimplementedAccountHoldingsServer) GetHolding(context.Context, *Holding) (*Holding, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHolding not implemented")
}
func (UnimplementedAccountHoldingsServer) ListHoldings(*Account, AccountHoldings_ListHoldingsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListHoldings not implemented")
}
func (UnimplementedAccountHoldingsServer) mustEmbedUnimplementedAccountHoldingsServer() {}

// UnsafeAccountHoldingsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountHoldingsServer will
// result in compilation errors.
type UnsafeAccountHoldingsServer interface {
	mustEmbedUnimplementedAccountHoldingsServer()
}

func RegisterAccountHoldingsServer(s grpc.ServiceRegistrar, srv AccountHoldingsServer) {
	s.RegisterService(&AccountHoldings_ServiceDesc, srv)
}

func _AccountHoldings_GetHoldings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountHoldingsServer).GetHoldings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AccountHoldings/GetHoldings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountHoldingsServer).GetHoldings(ctx, req.(*Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountHoldings_GetHolding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Holding)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountHoldingsServer).GetHolding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AccountHoldings/GetHolding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountHoldingsServer).GetHolding(ctx, req.(*Holding))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountHoldings_ListHoldings_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Account)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AccountHoldingsServer).ListHoldings(m, &accountHoldingsListHoldingsServer{stream})
}

type AccountHoldings_ListHoldingsServer interface {
	Send(*Holding) error
	grpc.ServerStream
}

type accountHoldingsListHoldingsServer struct {
	grpc.ServerStream
}

func (x *accountHoldingsListHoldingsServer) Send(m *Holding) error {
	return x.ServerStream.SendMsg(m)
}

// AccountHoldings_ServiceDesc is the grpc.ServiceDesc for AccountHoldings service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountHoldings_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.AccountHoldings",
	HandlerType: (*AccountHoldingsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHoldings",
			Handler:    _AccountHoldings_GetHoldings_Handler,
		},
		{
			MethodName: "GetHolding",
			Handler:    _AccountHoldings_GetHolding_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListHoldings",
			Handler:       _AccountHoldings_ListHoldings_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/holdings.proto",
}
